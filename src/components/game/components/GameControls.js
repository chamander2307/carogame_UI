import React, { memo } from "react";
import "./GameControls.css";

/**
 * Game Controls Component
 * Action buttons for game management
 */
const GameControls = memo(
  ({
    gameState,
    roomId,
    onSurrender,
    onRequestRematch,
    onAcceptRematch,
    onShowHistory,
    onShowSettings,
    disabled = false,
  }) => {
    /**
     * Check if surrender is available
     */
    const canSurrender = () => {
      return gameState.gameStatus === "playing" && !disabled;
    };

    /**
     * Check if rematch is available
     */
    const canRequestRematch = () => {
      return gameState.gameStatus === "finished" && !disabled;
    };

    /**
     * Handle surrender with confirmation
     */
    const handleSurrender = () => {
      if (!canSurrender()) return;

      const confirmed = window.confirm(
        "B·∫°n c√≥ ch·∫Øc mu·ªën ƒë·∫ßu h√†ng? Tr·∫≠n ƒë·∫•u s·∫Ω k·∫øt th√∫c v√† b·∫°n s·∫Ω thua."
      );

      if (confirmed && onSurrender) {
        onSurrender();
      }
    };

    /**
     * Handle rematch request
     */
    const handleRequestRematch = () => {
      if (!canRequestRematch()) return;

      if (onRequestRematch) {
        onRequestRematch();
      }
    };

    return (
      <div className="game-controls">
        <div className="controls-header">
          <h3>ƒêi·ªÅu khi·ªÉn</h3>
        </div>

        <div className="controls-grid">
          {/* Game Actions */}
          <div className="control-section">
            <h4>Tr·∫≠n ƒë·∫•u</h4>

            {/* Surrender Button */}
            <button
              className="btn btn-danger control-btn"
              onClick={handleSurrender}
              disabled={!canSurrender()}
              title={
                canSurrender()
                  ? "ƒê·∫ßu h√†ng v√† k·∫øt th√∫c tr·∫≠n ƒë·∫•u"
                  : "Kh√¥ng th·ªÉ ƒë·∫ßu h√†ng l√∫c n√†y"
              }
            >
              <span className="btn-icon">üè≥Ô∏è</span>
              <span>ƒê·∫ßu h√†ng</span>
            </button>

            {/* Rematch Button */}
            <button
              className="btn btn-warning control-btn"
              onClick={handleRequestRematch}
              disabled={!canRequestRematch()}
              title={
                canRequestRematch()
                  ? "Y√™u c·∫ßu ch∆°i l·∫°i"
                  : "Ch·ªâ c√≥ th·ªÉ y√™u c·∫ßu ch∆°i l·∫°i sau khi tr·∫≠n ƒë·∫•u k·∫øt th√∫c"
              }
            >
              <span className="btn-icon">üîÑ</span>
              <span>Ch∆°i l·∫°i</span>
            </button>
          </div>

          {/* Info Actions */}
          <div className="control-section">
            <h4>Th√¥ng tin</h4>

            {/* Game History Button */}
            <button
              className="btn btn-secondary control-btn"
              onClick={onShowHistory}
              disabled={disabled}
              title="Xem l·ªãch s·ª≠ n∆∞·ªõc ƒëi"
            >
              <span className="btn-icon">üìã</span>
              <span>L·ªãch s·ª≠</span>
            </button>

            {/* Settings Button */}
            <button
              className="btn btn-secondary control-btn"
              onClick={onShowSettings}
              disabled={disabled}
              title="C√†i ƒë·∫∑t game"
            >
              <span className="btn-icon">‚öôÔ∏è</span>
              <span>C√†i ƒë·∫∑t</span>
            </button>
          </div>

          {/* Quick Stats */}
          <div className="control-section">
            <h4>Th·ªëng k√™</h4>

            <div className="quick-stats">
              <div className="stat-item">
                <span className="stat-label">N∆∞·ªõc ƒëi:</span>
                <span className="stat-value">{gameState.moveCount || 0}</span>
              </div>

              <div className="stat-item">
                <span className="stat-label">Tr·∫°ng th√°i:</span>
                <span className={`stat-value status-${gameState.gameStatus}`}>
                  {gameState.gameStatus === "waiting" && "Ch·ªù"}
                  {gameState.gameStatus === "playing" && "ƒêang ch∆°i"}
                  {gameState.gameStatus === "finished" && "K·∫øt th√∫c"}
                </span>
              </div>

              {gameState.winner && (
                <div className="stat-item">
                  <span className="stat-label">K·∫øt qu·∫£:</span>
                  <span className="stat-value">
                    {gameState.winner === "DRAW"
                      ? "H√≤a"
                      : `Ng∆∞·ªùi th·∫Øng: ${gameState.winner}`}
                  </span>
                </div>
              )}
            </div>
          </div>

          {/* Room Actions */}
          <div className="control-section">
            <h4>Ph√≤ng</h4>

            {/* Leave Room Button */}
            <button
              className="btn btn-secondary control-btn"
              onClick={() => {
                const confirmed = window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën r·ªùi ph√≤ng?");
                if (confirmed) {
                  window.history.back();
                }
              }}
              disabled={disabled}
              title="R·ªùi kh·ªèi ph√≤ng"
            >
              <span className="btn-icon">üö™</span>
              <span>R·ªùi ph√≤ng</span>
            </button>

            {/* Copy Room ID */}
            <button
              className="btn btn-secondary control-btn"
              onClick={() => {
                navigator.clipboard.writeText(roomId?.toString() || "");
                // You might want to show a toast notification here
              }}
              disabled={disabled}
              title="Sao ch√©p ID ph√≤ng"
            >
              <span className="btn-icon">üìã</span>
              <span>Sao ch√©p ID</span>
            </button>
          </div>
        </div>

        {/* Game Status Indicator */}
        <div className="status-indicator-panel">
          <div className="status-row">
            <span className="status-label">K·∫øt n·ªëi:</span>
            <div className="connection-status online">
              <div className="status-dot"></div>
              <span>ƒê√£ k·∫øt n·ªëi</span>
            </div>
          </div>

          {gameState.gameStatus === "playing" && (
            <div className="status-row">
              <span className="status-label">L∆∞·ª£t:</span>
              <div className="turn-status">
                {gameState.isMyTurn ? (
                  <span className="my-turn">üéØ L∆∞·ª£t c·ªßa b·∫°n</span>
                ) : (
                  <span className="opponent-turn">‚è≥ Ch·ªù ƒë·ªëi th·ªß</span>
                )}
              </div>
            </div>
          )}
        </div>
      </div>
    );
  }
);

GameControls.displayName = "GameControls";

export default GameControls;
